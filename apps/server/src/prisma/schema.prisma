datasource db {
  provider = "mongodb"
  url      = env("MONGODB_URI")
  shadowDatabaseUrl = env("SHADOW_DATABASE_URL") // Only needed when using a cloud provider that doesn't support the creation of new databases, like Heroku. Learn more: https://pris.ly/d/migrate-shadow
}

generator client {
  provider        = "prisma-client-js"
  binaryTargets = ["native","darwin", "darwin-arm64"]
}

model Account {
  id  String  @id @default(auto()) @map("_id") @db.ObjectId
  userId             String 
  type               String
  provider           String
  providerAccountId  String
  refresh_token      String?  @db.String
  access_token       String?  @db.String
  expires_at         Int?
  token_type         String?
  scope              String?
  id_token           String?  @db.String
  session_state      String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
id  String  @id @default(auto()) @map("_id") @db.ObjectId
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
id  String  @id @default(auto()) @map("_id") @db.ObjectId
  name          String?
  email         String?   @unique
  username      String?   @unique
  conversations ConversationParticipant[]
  emailVerified DateTime?
  messages    Message[]

  image         String?
  accounts      Account[]
  sessions      Session[]
}

model VerificationToken {
  id  String  @id @default(auto()) @map("_id") @db.ObjectId
  identifier String
  token      String   @unique
  expires    DateTime
  @@unique([identifier, token])
}

model Conversation {
  id               String            @id @default(auto()) @map("_id") @db.ObjectId
  messages         Message[]
  participants     ConversationParticipant[]
  latestMessageId  String?            @unique 
  latestMessage    Message?          @relation(name: "latestConversationMessage", fields: [latestMessageId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  createdAt        DateTime          @default(now())
  updatedAt        DateTime          @updatedAt
}

//Model which joins two table 
model ConversationParticipant{
  id        String  @id @default(auto()) @map("_id") @db.ObjectId
  userId    String
  user      User @relation(fields: [userId], references: [id])
  conversationId String
  hasSeenLatestMessage Boolean 
  conversation Conversation @relation(fields: [conversationId], references: [id])
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Message{
  id        String  @id @default(auto()) @map("_id") @db.ObjectId
  conversationId String
  conversation Conversation @relation(fields: [conversationId], references: [id])
  senderId String
  sender User @relation(fields: [senderId], references: [id])
  body String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  isLatestIn  Conversation? @relation(name: "latestConversationMessage")
}

